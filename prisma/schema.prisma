generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AnalysisParameterGroup {
  id                 Int                 @id @default(autoincrement())
  name               String
  analysisParameters AnalysisParameter[]
}

model AnalysisParameter {
  id                      Int                    @default(autoincrement())
  groupId                 Int
  name                    String
  analysisParameterGroups AnalysisParameterGroup @relation(fields: [groupId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  matchEvents             MatchEvent[]
  matchStatisticsSum      MatchStatisticsSum[]

  @@id([id, groupId])
}

model Coach {
  fpcId     Int       @id
  level     Int
  fpcMember FpcMember @relation(fields: [fpcId], references: [fpcId])
  Team      Team[]
}

model Club {
  initials String @id
  name     String @unique
  teams    Team[]
}

model Competition {
  season  String
  name    String
  matches Match[]

  @@id([season, name])
}

model Coordenation {
  staffId Int   @id
  staff   Staff @relation(fields: [staffId], references: [staffId], onDelete: Cascade, onUpdate: Cascade)
}

model FpcMember {
  fpcId     Int     @id
  firstName String
  lastName  String
  member    Member?
  player    Player?
  Coach     Coach[]
}

model MatchEvent {
  date                                                           DateTime
  matchId                                                        Int
  fpcId                                                          Int
  opponentId                                                     Int
  analysisParameterGroup                                         Int
  analysisParameterId                                            Int
  value                                                          Int
  analysisParameters                                             AnalysisParameter @relation(fields: [analysisParameterGroup, analysisParameterId], references: [groupId, id], onDelete: NoAction, onUpdate: NoAction)
  match_players_match_events_match_id_fpc_idTomatch_players      MatchPlayer       @relation("match_events_match_id_fpc_idTomatch_players", fields: [matchId, fpcId], references: [matchId, fpcId], onDelete: NoAction, onUpdate: NoAction)
  match_players_match_events_match_id_opponent_idTomatch_players MatchPlayer       @relation("match_events_match_id_opponent_idTomatch_players", fields: [matchId, opponentId], references: [matchId, fpcId], onDelete: NoAction, onUpdate: NoAction)

  @@id([date, matchId])
}

model MatchPlayer {
  matchId                                                       Int
  fpcId                                                         Int
  clubInitials                                                  String
  teamDesignation                                               String
  team                                                          Team                 @relation(fields: [clubInitials, teamDesignation], references: [clubInitials, designation], onDelete: NoAction, onUpdate: NoAction)
  player                                                        Player               @relation(fields: [fpcId], references: [fpcId], onDelete: NoAction, onUpdate: NoAction)
  match                                                         Match                @relation(fields: [matchId], references: [matchId], onDelete: NoAction, onUpdate: NoAction)
  match_events_match_events_match_id_fpc_idTomatch_players      MatchEvent[]         @relation("match_events_match_id_fpc_idTomatch_players")
  match_events_match_events_match_id_opponent_idTomatch_players MatchEvent[]         @relation("match_events_match_id_opponent_idTomatch_players")
  match_statistics_sum                                          MatchStatisticsSum[]

  @@id([matchId, fpcId])
}

model MatchStatisticsSum {
  fpcId                  Int
  matchId                Int
  analysisParameterGroup Int
  analysisParameterId    Int
  value                  Int
  analysisParameter      AnalysisParameter @relation(fields: [analysisParameterGroup, analysisParameterId], references: [groupId, id], onDelete: NoAction, onUpdate: NoAction)
  matchPlayer            MatchPlayer       @relation(fields: [fpcId, matchId], references: [fpcId, matchId], onDelete: NoAction, onUpdate: NoAction)

  @@id([fpcId, matchId, analysisParameterGroup, analysisParameterId])
}

model Match {
  matchId                                                            Int           @id @default(autoincrement())
  season                                                             String
  competition                                                        String
  homeTeamClubInitials                                               String
  homeTeamDesignation                                                String
  awayTeamClubInitials                                               String
  awayTeamDesignation                                                String
  date                                                               DateTime
  teams_matches_away_team_club_initials_away_team_designationToteams Team          @relation("matches_away_team_club_initials_away_team_designationToteams", fields: [awayTeamClubInitials, awayTeamDesignation], references: [clubInitials, designation], onDelete: NoAction, onUpdate: NoAction)
  teams_matches_home_team_club_initials_home_team_designationToteams Team          @relation("matches_home_team_club_initials_home_team_designationToteams", fields: [homeTeamClubInitials, homeTeamDesignation], references: [clubInitials, designation], onDelete: NoAction, onUpdate: NoAction)
  competitions                                                       Competition   @relation(fields: [season, competition], references: [season, name], onDelete: NoAction, onUpdate: NoAction)
  matchPlayers                                                       MatchPlayer[]
}

model Member {
  memberId       Int        @id @default(autoincrement())
  fpcId          Int?       @unique
  type           MemberType @default(sympathizer)
  firstName      String
  lastName       String
  birthDate      DateTime
  mobile         String
  email          String
  documentType   String
  documentNumber String
  vatId          Int
  joinedOn       DateTime   @default(now())
  lastPayment    DateTime   @default(now())
  fpcMember      FpcMember? @relation(fields: [fpcId], references: [fpcId], onDelete: NoAction, onUpdate: Cascade)
  Payments       Payment[]
  Staff          Staff?
}

model Payment {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  dueIn     DateTime @default(now())
  memberId  Int
  value     Float
  isPending Boolean  @default(true)
  member    Member   @relation(fields: [memberId], references: [memberId], onDelete: SetNull, onUpdate: Cascade)
}

model Player {
  fpcId           Int           @id
  clubInitials    String
  teamDesignation String
  shirtNumber     Int
  team            Team          @relation(fields: [clubInitials, teamDesignation], references: [clubInitials, designation], onDelete: NoAction, onUpdate: NoAction)
  fpcMember       FpcMember     @relation(fields: [fpcId], references: [fpcId], onDelete: NoAction, onUpdate: Cascade)
  matchPlayers    MatchPlayer[]

  @@unique([clubInitials, teamDesignation, shirtNumber])
}

model Staff {
  staffId      Int           @id @default(autoincrement())
  memberId     Int?          @unique
  firstName    String
  lastName     String
  department   Department[]
  title        String[]
  joinedOn     DateTime      @default(now())
  member       Member?       @relation(fields: [memberId], references: [memberId], onDelete: NoAction, onUpdate: Cascade)
  coordenation Coordenation?


}

model Team {
  designation                                                          String
  clubInitials                                                         String
  club                                                                 Club          @relation(fields: [clubInitials], references: [initials], onDelete: NoAction, onUpdate: NoAction)
  matchPlayers                                                         MatchPlayer[]
  matches_matches_away_team_club_initials_away_team_designationToteams Match[]       @relation("matches_away_team_club_initials_away_team_designationToteams")
  matches_matches_home_team_club_initials_home_team_designationToteams Match[]       @relation("matches_home_team_club_initials_home_team_designationToteams")
  players                                                              Player[]
  coach                                                                Coach?        @relation(fields: [coachFpcId], references: [fpcId])

  coachFpcId Int?
  @@id([designation, clubInitials])
}

enum Department {
  Administration
  aKademyLx
  Competition
  Financial
  IT
  Legal
  MarketingAndSales
  Medical
  Resources
}

enum MemberType {
  effective
  founder
  honorary
  sympathizer
}
